1. react 的事件绑定和原生事件绑定有什么区别：事件委托
2.事件绑定时候要注意什么问题：this
3. ref：字符串   createRef
4.setState 之后都做了什么？
5.key的用处？
5.unit test 
6.performance 
7.hooks
8.useMemo  useCallback
9.深拷贝和浅拷贝 
10.flex 布局  ：flex：1 ？？表示什么
11.react 18 中的setState与之前的区别  ：18 之前，在同步逻辑里是异步的，在异步操作和原生事件里面是同步的
     18 中无论在何种语境中，都变成了异步··
13.受控组件和非受控组件
12.组件之前的通信方式
  1. 父子：A.props  B.子组件的ref
  2.非父子：
   2.1 兄弟组件：状态提升 Lifting State Up（多个组件有共同的父组件，父组件作为中间人）
   2.2 发布订阅模式： pubsub
   2.3 context :生产者和消费者模式 

14.插槽  ---props.children 的使用

16.生命周期函数：初始化  更新  销毁
    
  A. componentWillMount：*****UNSAFE  
  　　render 之前最后修改状态的机会 为什么变成了UNSAFE？？　fiber 的提出高优先级的问题，可能导致这个生命周期（优先级低）被多次打断，多次执行
  Ｂ．render 
  　　不能修改 props state  
  C. componentDidMount： axios setinteerval subcribe dom

  更新：
  A.componentWillReceiveProps: ****UNSAFE
       参数 nextProps，
       父组件状态的改变,运用在子组件里 ，挂载时候不触发，
       可以根据新的props进行逻辑处理，比如转化为自己内部状态..
  B.shouldComponentUpdate:   
       参数 nextProps nextState ,return true /false
  C.componentWillUpdate:  *****UNSAFE 
  D.render
  E.componentDidUpdate: dom操作  参数 prevProps prevState ,多次调用，要加判断，避免不必要的操作

  销毁：
  componentWillUnmount 


  
  #####新的生命周期
  A.getDerivedStateFromProps: 
       static  参数(nextProps,nextState)
       返回一个对象  会与组件state 合并
       在初始化和更新中都会调用
       不能使用this ,不能有异步逻辑
       配合componentDidUpdate 使用

 B.  getSnapshotBeforeUpdate 
     参数(prevProps,prevState)
     更新中调用
     返回一个对象
     配合componentDidUpdate 使用,返回值作为第三个参数


  ####
17.hooks  :
   A.useState:这个有异步同步区分吗？ 存在合并吗？
   B.useEffect :
        可以模拟 componentDidMount componentDidUpdate  componentWillMount
        一个文件可以写多个useEffect，
        在页面渲染完成后执行，可能会导致页面抖动
   C.useLayoutEffect：可以模拟 componentDidMount componentDidUpdate
       在完成Dom更新完成后立即同步执行代码，可能会阻碍渲染进程
   D.useCallback:缓存一个函数
   E.useCallMemo:缓存一个函数并执行，将结果返回,可以完全替代useCallback
   F.useRef：
          1.可以访问元素或者组件的属性或方法  
          2.保存一个临时变量，可以记住变量值，模拟uesState.利用闭包
   G.useContext : 对于之前子组件在使用父组件的Provider的简化
                  要使用有同个父组件的多个context时候，
                  也不用再用各种Provider对子组件也不用嵌套，
                  返回jsx时不用写成函数形式

                  父组件：生成Globalcontext React.createContext
                  子组件：引入Globalcontext ,let context =useContext(context)，this.context
   H.useReducer: 
         把reducer处理函数reducer(prevState,action)和state 对象, 
         公共的globalContext 放在外部
       let  [state,dispatch] = useReducer(reducer,stateObj)
      模拟一个简单版的redux  diapatch 不能处理异步
       父子级，跨级组件组件的使用:与createContext useContext配合使用

 自定义hooks ：对官方hooks的二次封装。一个函数，函数里面包含了官方的hooks

router 

HashRouter: window.onHashChange location.hash

Route  navlink activeClass  声明式:
  对应的组件props 会有路由详细信息，实现编程式跳转
  props.history.push

  hooks:useHistory  =>props.history
window.location.href = '' 编程式

路由拦截：<Route ></Route>
css module : 局部样式
redux ：数据集中管理  发布订阅模式

store : state 以单一对象存储在store中  
state 只读，reducer修改和返回的是它的复制
reducer 纯函数，对外界的变量不产生影响（不操作参数），输入一定输出就一定

reducer 合并  combineReducer({a,b})  store.getState().a.xx


redux-thunk : 1。store dispatch 无法处理函数类型的action 2.执行函数，返回对象
redux-promise ：处理返回一个promise 对象的函数
redux-persist : 实现store 中state存储的持久化，将state中的数据根据用户配置存在localstorage
immutable 的使用： 实现一个变量仅仅能被使用但不能被修改
API:Map  List  toJS  fromJS set   get  setIn update  updateIn..
immutable 和redux 的结合使用：reducer 中的初始值，通过fromJS设置，然后通过API更改后返回
mobx : 状态管理  观察者模式    getter  setter 和Vue相似  obversable API autorun监听事件

TS的使用

styled-component 实现真正的组件，将css 和功能逻辑完全整合在一个文件
也可以去封装一些公用的设置好样式的常规组件

单元测试
redux-saga: 与redux-thunk  的区别？？？？？
component dispatch action => wacth saga  take action => new action =>redducer =>newSatate =>store =>component
forwardRef  高阶函数,用在子组件 :接收一个函数
  //函数的参数  props，ref ，返回子组件template 
//实现  ref的透传   子组件必须是函数组件 

React.memo  ///用于函数式组件 ,在父组件改变时，如果子组件里的属性
            没发生改变，则不会重新render
DVajs
umijs : 阿里团队开发，将许多组件库和js react  vue 集成在一起，实现开箱即用

react-router 6 的新增了哪些内容

1.Route    path  element = 组件标签  
2. 匹配父级路径  index  
3. 路由的嵌套 outlet  
4. navlink Link   ：navlink  没有了activeclassName 
5. 
   5.1 重定向 Navigate to   from react-router-dom
   5.2  自己封装一个redirect  组件
6. 编程式：
  useNavigate  uselocation  
  useParams  useSearchParams  from  react-router-dom 


